--  Name : Parth Sarkhelia (AU1841045)
--  Assignment 02 :	Inventory Management  (Q02)


DROP TABLE STOCK;
DROP TABLE PRODUCT;
DROP TABLE CATEGORY;
DROP TABLE SUPPLIER;
DROP TABLE BRAND;

CREATE TABLE BRAND (
    BRAND_ID INT ,
    BRAND_NAME VARCHAR(200),
    CONSTRAINT PK_BRAND PRIMARY KEY (BRAND_ID)
);

CREATE TABLE SUPPLIER (
    SUPPLIER_ID INT,
    SUPPLIER_NAME VARCHAR(200) NOT NULL,
    SUPPLIER_ADDRESS VARCHAR(200) NOT NULL,
    SUPPLIER_EMAIL VARCHAR(200),
    SUPPLIER_PHONE VARCHAR(15) NOT NULL,
    SUPPLIER_STATUS VARCHAR(20),
    CONSTRAINT PK_SUPPLIER PRIMARY KEY (SUPPLIER_ID),
    CONSTRAINT CHECK_SUPPLIER_STATUS CHECK (SUPPLIER_STATUS = 'ACTIVE' OR SUPPLIER_STATUS = 'INACTIVE')
);


CREATE TABLE CATEGORY (
    CATEGORY_TYPE_ID INT,
    CATEGORY_NAME VARCHAR(50) NOT NULL,
    CONSTRAINT PK_CATEGORY PRIMARY KEY (CATEGORY_TYPE_ID)
);

CREATE TABLE PRODUCT (
    PRODUCT_ID INT,
    PRODUCT_NAME VARCHAR(200) NOT NULL,
    PRODUCT_BRAND_ID INT,
    PRODUCT_CATEGORY_TYPE_ID INT,
    PRODUCT_PRICE INT NOT NULL,
    PRODUCT_SUPPLIER_ID INT,
    CONSTRAINT PK_PRODUCT PRIMARY KEY (PRODUCT_ID),
    CONSTRAINT FK_PRODUCT_SUPPLIER_ID FOREIGN KEY (PRODUCT_SUPPLIER_ID) REFERENCES SUPPLIER(SUPPLIER_ID),
    CONSTRAINT FK_PRODUCT_CATEGORY_TYPE_ID FOREIGN KEY (PRODUCT_CATEGORY_TYPE_ID) REFERENCES CATEGORY(CATEGORY_TYPE_ID),
    CONSTRAINT FK_PRODUCT_BRAND_ID FOREIGN KEY (PRODUCT_BRAND_ID) REFERENCES BRAND(BRAND_ID)
);

CREATE TABLE STOCK (
    STOCK_PRODUCT_ID INT,
    PRODUCT_QUANTITY INT,
    CONSTRAINT PK_STOCK PRIMARY KEY (STOCK_PRODUCT_ID),
    UPDATE_DATE DATE,
    CONSTRAINT FK_STOCK_PRODUCT_ID FOREIGN KEY (STOCK_PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID) 
);


--  INSERT INTO BRAND :
INSERT INTO BRAND VALUES(1,'Rtrends');
INSERT INTO BRAND VALUES(2,'Titan');
INSERT INTO BRAND VALUES(3,'Levis');
INSERT INTO BRAND VALUES(4,'Indigo');

--  INSERT INTO CATEGORY :
INSERT INTO CATEGORY VALUES(1,'Women');
INSERT INTO CATEGORY VALUES(2,'Men');
INSERT INTO CATEGORY VALUES(3,'Kids');


--  INSERT TO SUPPLIER :
INSERT INTO SUPPLIER VALUES(1,'S1','A32 Hara Street Ludhiana','S1@xyz.com','6989978767','ACTIVE');
INSERT INTO SUPPLIER VALUES(2,'S2','First Floor Safal market Ahmedabad','S2@xyz.com','9578888868','ACTIVE');
INSERT INTO SUPPLIER VALUES(3,'S3','Shop 450 Main Market New Delhi','S3@xyz.com','8943753545','ACTIVE');
INSERT INTO SUPPLIER VALUES(4,'S4','F-5 Gandhi Market Jalandhar','S4@xyz.com','7899786642','INACTIVE');

--  INSERT INTO PRODUCT :
INSERT INTO PRODUCT VALUES (1,'Watches',2,1,7000,1);
INSERT INTO PRODUCT VALUES (2,'Ethnic Wear',1,1,1000,2);
INSERT INTO PRODUCT VALUES (3,'Jeans',3,2,1000,1);
INSERT INTO PRODUCT VALUES (4,'Shirts',3,2,1500,2);
INSERT INTO PRODUCT VALUES (5,'Shoes',3,2,1500,3);
INSERT INTO PRODUCT VALUES (6,'Kids Wear',1,3,2000,1);


--  INSERT INTO STOCK :
INSERT INTO STOCK VALUES(1,200,NULL);
INSERT INTO STOCK VALUES(2,1000,NULL);
INSERT INTO STOCK VALUES(3,1500,NULL);
INSERT INTO STOCK VALUES(4,2000,NULL);
INSERT INTO STOCK VALUES(5,1000,NULL);
INSERT INTO STOCK VALUES(6,3000,NULL);

DESC BRAND;
DESC PRODUCT;
DESC SUPPLIER;
DESC CATEGORY;
DESC STOCK;


--  1. Display product_name and product quantity for each product
SELECT PRODUCT_NAME, PRODUCT_QUANTITY FROM STOCK,PRODUCT WHERE STOCK.STOCK_PRODUCT_ID = PRODUCT.PRODUCT_ID;


--  2. Display details of supplier S2.
SELECT * FROM SUPPLIER WHERE SUPPLIER_NAME = 'S2';


--  3. Display supplier details who supply products for brand “Aurelia”.
SELECT * FROM SUPPLIER, PRODUCT WHERE SUPPLIER_ID = PRODUCT_SUPPLIER_ID AND PRODUCT_BRAND_ID = (SELECT BRAND_ID FROM BRAND WHERE BRAND_NAME = 'Levis');


--  4.Display the total quantity of brand Levis.
SELECT SUM(PRODUCT_QUANTITY) FROM STOCK,PRODUCT WHERE STOCK_PRODUCT_ID = PRODUCT_ID AND PRODUCT_BRAND_ID = (SELECT BRAND_ID FROM BRAND WHERE BRAND_NAME = 'Levis');


--  5. Display address,email and phone details of all suppliers.
SELECT SUPPLIER_ADDRESS,SUPPLIER_EMAIL,SUPPLIER_PHONE FROM SUPPLIER;


--  6. Display category details for each brand.
SELECT CATEGORY_TYPE_ID,CATEGORY_NAME, BRAND_NAME FROM CATEGORY,PRODUCT,BRAND WHERE CATEGORY_TYPE_ID = PRODUCT_CATEGORY_TYPE_ID AND PRODUCT_BRAND_ID = BRAND_ID ORDER BY BRAND_NAME;


--  7. Calculate total price for each product.
SELECT PRODUCT_ID, PRODUCT_NAME, PRODUCT_BRAND_ID, PRODUCT_SUPPLIER_ID, PRODUCT_CATEGORY_TYPE_ID, PRODUCT_PRICE * STOCK.PRODUCT_QUANTITY FROM STOCK,PRODUCT WHERE PRODUCT_ID = STOCK_PRODUCT_ID;


--  8. Display brand name having products for men and kids.
SELECT DISTINCT BRAND_NAME, CATEGORY_NAME FROM BRAND, CATEGORY, PRODUCT WHERE BRAND_ID = PRODUCT_BRAND_ID AND PRODUCT_CATEGORY_TYPE_ID = CATEGORY_TYPE_ID AND (CATEGORY_NAME = 'Kids' OR CATEGORY_NAME = 'Men'); 


--  9. Display product details supplied by supplier S1.
SELECT PRODUCT_ID, PRODUCT_NAME, PRODUCT_BRAND_ID, PRODUCT_SUPPLIER_ID, PRODUCT_CATEGORY_TYPE_ID, PRODUCT_PRICE FROM PRODUCT, SUPPLIER WHERE PRODUCT_SUPPLIER_ID = SUPPLIER_ID AND SUPPLIER_NAME = 'S1';


--  10. Display the brand ,product name ,product quantity,product price for “ethnic wear”.
SELECT DISTINCT PRODUCT_ID, PRODUCT_NAME, BRAND_NAME,  PRODUCT_QUANTITY, PRODUCT_PRICE FROM  PRODUCT,BRAND, STOCK WHERE BRAND_ID = PRODUCT_BRAND_ID AND PRODUCT_ID = STOCK_PRODUCT_ID AND PRODUCT_NAME = 'Ethnic Wear';


--  11. Display details of supplier who supply all category type products.
SELECT SUPPLIER_ID,SUPPLIER_NAME,SUPPLIER_ADDRESS,SUPPLIER_EMAIL,SUPPLIER_PHONE,SUPPLIER_STATUS FROM SUPPLIER WHERE SUPPLIER_ID IN (SELECT SUPPLIER_ID FROM SUPPLIER,CATEGORY,PRODUCT WHERE PRODUCT_SUPPLIER_ID = SUPPLIER_ID AND PRODUCT_CATEGORY_TYPE_ID = CATEGORY_TYPE_ID GROUP BY SUPPLIER_ID HAVING COUNT(CATEGORY_TYPE_ID) = 3);


--  12. Display details of suppliers from in New Delhi.
SELECT * FROM SUPPLIER WHERE SUPPLIER_ADDRESS LIKE '%New Delhi';


--  13. Display product details with longest product name.
SELECT LENGTH(PRODUCT_NAME), PRODUCT_NAME, PRODUCT_BRAND_ID, PRODUCT_SUPPLIER_ID, PRODUCT_CATEGORY_TYPE_ID, PRODUCT_PRICE FROM PRODUCT WHERE LENGTH(PRODUCT_NAME) = (SELECT MAX(LENGTH(PRODUCT_NAME)) FROM PRODUCT);


--  14. Display product name with minimum quantity.
SELECT PRODUCT_NAME, PRODUCT_QUANTITY FROM PRODUCT, STOCK WHERE PRODUCT_ID = STOCK_PRODUCT_ID AND LENGTH(PRODUCT_QUANTITY) = (SELECT MIN(LENGTH(PRODUCT_QUANTITY)) FROM STOCK); 


--  15. Display total stock value available along with total stock quantity.
SELECT SUM(PRODUCT_PRICE * PRODUCT_QUANTITY), SUM(PRODUCT_QUANTITY) FROM PRODUCT,STOCK WHERE PRODUCT_ID = STOCK_PRODUCT_ID;


--  16. Display left outer join of Supplier and Product table.
SELECT * FROM SUPPLIER LEFT JOIN PRODUCT ON PRODUCT_SUPPLIER_ID = SUPPLIER_ID;


--  17. Display right outer join of Product and Brand table.
SELECT * FROM PRODUCT RIGHT JOIN BRAND ON PRODUCT_BRAND_ID = BRAND_ID;


--  18. Display product names with same product price.
SELECT P1.PRODUCT_NAME, P2.PRODUCT_NAME FROM PRODUCT P1, PRODUCT P2 WHERE P1.PRODUCT_PRICE = P2.PRODUCT_PRICE AND P1.PRODUCT_ID < P2.PRODUCT_ID;


--  19. Display product name with second highest product price.
SELECT PRODUCT_NAME, PRODUCT_PRICE FROM PRODUCT WHERE PRODUCT_PRICE = (SELECT MAX(PRODUCT_PRICE) FROM (SELECT PRODUCT_PRICE FROM PRODUCT MINUS SELECT (MAX(PRODUCT_PRICE)) FROM PRODUCT));


--  20. Display product name ,product quantity,product price in ascending order of price and descending order of quantity.
SELECT PRODUCT_NAME, PRODUCT_QUANTITY, PRODUCT_PRICE FROM PRODUCT, STOCK WHERE PRODUCT_ID = STOCK_PRODUCT_ID ORDER BY PRODUCT_PRICE ASC, PRODUCT_QUANTITY DESC;


--  21. Display supplier details who supply more than 2 products.
SELECT * FROM SUPPLIER WHERE SUPPLIER_ID IN (SELECT SUPPLIER_ID FROM SUPPLIER,PRODUCT WHERE PRODUCT_SUPPLIER_ID = SUPPLIER_ID GROUP BY SUPPLIER_ID HAVING COUNT(PRODUCT_ID)>2);


--  22. Display inner join of brand, category, product and supplier
SELECT * FROM PRODUCT INNER JOIN BRAND ON PRODUCT_BRAND_ID = BRAND_ID INNER JOIN SUPPLIER ON PRODUCT_SUPPLIER_ID = SUPPLIER_ID INNER JOIN CATEGORY ON PRODUCT_CATEGORY_TYPE_ID = CATEGORY_TYPE_ID;


--  23. Display union of brand and product. (Use “union” operator)
SELECT PRODUCT_BRAND_ID FROM PRODUCT UNION SELECT BRAND_ID FROM BRAND;


--  24. Display intersection of supplier and product. ((Use “intersect” operator)
SELECT SUPPLIER_ID FROM SUPPLIER INTERSECT SELECT PRODUCT_SUPPLIER_ID FROM PRODUCT;


--  25. Display products supplied by various brands
--  DOUBT
SELECT PRODUCT_ID, PRODUCT_NAME, BRAND_NAME, PRODUCT_SUPPLIER_ID, PRODUCT_PRICE FROM PRODUCT, BRAND WHERE PRODUCT_BRAND_ID = BRAND_ID;


--  26.  Select brand which is not supplied by any supplier
SELECT BRAND_ID, BRAND_NAME FROM BRAND WHERE BRAND_ID NOT IN (SELECT BRAND_ID FROM PRODUCT,BRAND,SUPPLIER WHERE PRODUCT_SUPPLIER_ID = SUPPLIER_ID AND PRODUCT_BRAND_ID = BRAND_ID);


--  27. Display suppliers who supply women or kids wear.
SELECT SUPPLIER_ID, SUPPLIER_NAME, SUPPLIER_ADDRESS, SUPPLIER_EMAIL, SUPPLIER_PHONE, SUPPLIER_STATUS FROM SUPPLIER WHERE SUPPLIER_ID IN (SELECT SUPPLIER_ID FROM SUPPLIER, PRODUCT WHERE PRODUCT_SUPPLIER_ID = SUPPLIER_ID AND (PRODUCT_NAME = 'Women' OR PRODUCT_NAME = 'Kids Wear'));


--  28. Display total stock quantity based on category type.
SELECT CATEGORY_TYPE_ID,SUM(PRODUCT_QUANTITY) FROM STOCK,PRODUCT,CATEGORY WHERE PRODUCT_CATEGORY_TYPE_ID = CATEGORY_TYPE_ID AND PRODUCT_ID  = STOCK_PRODUCT_ID GROUP BY CATEGORY_TYPE_ID;


--  29. Display count of suppliers brand wise
SELECT BRAND_ID, COUNT(SUPPLIER_ID) FROM BRAND, SUPPLIER, PRODUCT WHERE BRAND_ID = PRODUCT_BRAND_ID AND SUPPLIER_ID = PRODUCT_SUPPLIER_ID GROUP BY BRAND_ID;


--  30. Display product name with maximum quantity.
SELECT PRODUCT_NAME, PRODUCT_ID, PRODUCT_QUANTITY FROM PRODUCT,STOCK WHERE STOCK_PRODUCT_ID = PRODUCT_ID AND PRODUCT_QUANTITY = (SELECT MAX(PRODUCT_QUANTITY) FROM STOCK);